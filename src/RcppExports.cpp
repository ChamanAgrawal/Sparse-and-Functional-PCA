// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// soft_thr
VectorXd soft_thr(VectorXd a, double lam, bool pos);
RcppExport SEXP _Sparse-and-Functional-PCA_soft_thr(SEXP aSEXP, SEXP lamSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< bool >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thr(a, lam, pos));
    return rcpp_result_gen;
END_RCPP
}
// sfpca_fixed
Rcpp::List sfpca_fixed(MatrixXd x, double lamu, double lamv, double alphau, double alphav, MatrixXd Omegu, MatrixXd Omegv, VectorXd startu, VectorXd startv, bool posu, bool posv, double maxit);
RcppExport SEXP _Sparse-and-Functional-PCA_sfpca_fixed(SEXP xSEXP, SEXP lamuSEXP, SEXP lamvSEXP, SEXP alphauSEXP, SEXP alphavSEXP, SEXP OmeguSEXP, SEXP OmegvSEXP, SEXP startuSEXP, SEXP startvSEXP, SEXP posuSEXP, SEXP posvSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lamu(lamuSEXP);
    Rcpp::traits::input_parameter< double >::type lamv(lamvSEXP);
    Rcpp::traits::input_parameter< double >::type alphau(alphauSEXP);
    Rcpp::traits::input_parameter< double >::type alphav(alphavSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Omegu(OmeguSEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type Omegv(OmegvSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type startu(startuSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type startv(startvSEXP);
    Rcpp::traits::input_parameter< bool >::type posu(posuSEXP);
    Rcpp::traits::input_parameter< bool >::type posv(posvSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(sfpca_fixed(x, lamu, lamv, alphau, alphav, Omegu, Omegv, startu, startv, posu, posv, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Sparse-and-Functional-PCA_soft_thr", (DL_FUNC) &_Sparse-and-Functional-PCA_soft_thr, 3},
    {"_Sparse-and-Functional-PCA_sfpca_fixed", (DL_FUNC) &_Sparse-and-Functional-PCA_sfpca_fixed, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_Sparse-and-Functional-PCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
